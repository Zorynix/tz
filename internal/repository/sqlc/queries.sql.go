// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const calculateTotalCost = `-- name: CalculateTotalCost :one
SELECT COALESCE(SUM(price), 0)::BIGINT as total_cost FROM subscriptions
WHERE 
    ($1::UUID IS NULL OR user_id = $1) AND
    ($2::VARCHAR IS NULL OR service_name ILIKE '%' || $2 || '%') AND
    (start_date <= $4) AND
    (end_date IS NULL OR end_date >= $3)
`

type CalculateTotalCostParams struct {
	Column1   pgtype.UUID
	Column2   string
	EndDate   pgtype.Text
	StartDate string
}

func (q *Queries) CalculateTotalCost(ctx context.Context, arg CalculateTotalCostParams) (int64, error) {
	row := q.db.QueryRow(ctx, calculateTotalCost,
		arg.Column1,
		arg.Column2,
		arg.EndDate,
		arg.StartDate,
	)
	var total_cost int64
	err := row.Scan(&total_cost)
	return total_cost, err
}

const countSubscriptions = `-- name: CountSubscriptions :one
SELECT COUNT(*) FROM subscriptions
WHERE 
    ($1::UUID IS NULL OR user_id = $1) AND
    ($2::VARCHAR IS NULL OR service_name ILIKE '%' || $2 || '%')
`

type CountSubscriptionsParams struct {
	Column1 pgtype.UUID
	Column2 string
}

func (q *Queries) CountSubscriptions(ctx context.Context, arg CountSubscriptionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptions, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (service_name, price, user_id, start_date, end_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, service_name, price, user_id, start_date, end_date, created_at, updated_at
`

type CreateSubscriptionParams struct {
	ServiceName string
	Price       int32
	UserID      pgtype.UUID
	StartDate   string
	EndDate     pgtype.Text
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, createSubscription,
		arg.ServiceName,
		arg.Price,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.Price,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubscription, id)
	return err
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, service_name, price, user_id, start_date, end_date, created_at, updated_at FROM subscriptions WHERE id = $1
`

func (q *Queries) GetSubscription(ctx context.Context, id pgtype.UUID) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscription, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.Price,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, service_name, price, user_id, start_date, end_date, created_at, updated_at FROM subscriptions
WHERE 
    ($1::UUID IS NULL OR user_id = $1) AND
    ($2::VARCHAR IS NULL OR service_name ILIKE '%' || $2 || '%')
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListSubscriptionsParams struct {
	Column1 pgtype.UUID
	Column2 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListSubscriptions(ctx context.Context, arg ListSubscriptionsParams) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, listSubscriptions,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Price,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions 
SET 
    service_name = COALESCE($2, service_name),
    price = COALESCE($3, price),
    start_date = COALESCE($4, start_date),
    end_date = COALESCE($5, end_date),
    updated_at = NOW()
WHERE id = $1
RETURNING id, service_name, price, user_id, start_date, end_date, created_at, updated_at
`

type UpdateSubscriptionParams struct {
	ID          pgtype.UUID
	ServiceName string
	Price       int32
	StartDate   string
	EndDate     pgtype.Text
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, updateSubscription,
		arg.ID,
		arg.ServiceName,
		arg.Price,
		arg.StartDate,
		arg.EndDate,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.Price,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
